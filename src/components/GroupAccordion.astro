---
import { type GroupAccordion } from "@/types/Global"
import Accordion from "./Accordion.astro"
import Typography from "./Typography.astro"

interface Props {
	accordions: GroupAccordion[]
}

const { accordions } = Astro.props
---

<article class="px-5 py-16 text-center">
	<header class="mb-16 lg:mb-12">
		<h2 class="font-mono text-5xl font-bold text-dark-100">FAQs</h2>
	</header>

	<div class="flex flex-col gap-16">
		{
			accordions ? (
				accordions.map(({ groupId, groupTitle, groupAccordions }) => {
					return (
						<div
							class="group-faqs items-start justify-between gap-8 max-lg:flex max-lg:flex-col lg:grid"
							style="grid-template-columns: minmax(240px, 350px) 1fr;"
						>
							<Typography
								as="h2"
								variant="h3"
								color="dark100"
								class="w-full max-lg:text-center lg:max-w-[350px]"
							>
								{groupTitle}
							</Typography>

							<div class="flex w-full max-w-full flex-col gap-6 lg:ml-auto lg:max-w-[730px] lg:gap-4">
								{groupAccordions.map((accordion, index) => (
									<Accordion accordion={accordion} numberGroup={groupId} numberAccordion={index} />
								))}
							</div>
						</div>
					)
				})
			) : (
				<div>
					<Typography as="h4" variant="h4" color="dark100" class="mb-7">
						No content
					</Typography>
				</div>
			)
		}
	</div>
</article>

<script>
	import { $ } from "@/lib/dom.ts"

	function runAccordion() {
		const accordions = document.querySelectorAll(
			"[data-accordion][data-group]"
		) as NodeListOf<HTMLElement>

		accordions.forEach((accordion, index) => {
			const { group, sortAccordion } = accordion.dataset

			const firstContent = $(`[data-content="${group}-${sortAccordion}"]`, accordion)
			if (index === 0 && firstContent) setActiveAccordion({ accordion, content: firstContent })

			accordion.querySelector("button")?.addEventListener("click", () => {
				const content = $(`[data-content="${group}-${sortAccordion}"]`, accordion)

				if (!content) return

				if (!accordion.classList.contains("active")) setActiveAccordion({ accordion, content })
				else setDesactiveAccordion({ accordion, content })
			})
		})
	}

	function setActiveAccordion({
		accordion,
		content,
	}: {
		accordion: HTMLElement
		content: HTMLElement
	}) {
		accordion.classList.add("active")

		content.classList.remove("hidden")
		content.style.maxHeight = `${content.scrollHeight}px`
	}

	function setDesactiveAccordion({
		accordion,
		content,
	}: {
		accordion: HTMLElement
		content: HTMLElement
	}) {
		accordion.classList.remove("active")

		content.style.maxHeight = ""
		setTimeout(() => {
			content.classList.add("hidden")
		}, 300)
	}

	runAccordion()
</script>
