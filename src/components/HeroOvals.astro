---
interface Props {
	numberOvals?: number
	size: "small" | "medium" | "large"
	opacity?: boolean
	position: "hero-home" | "hero" | "footer"
}

const SIZE_VALUES = {
	small: "h-16 w-16 border-4",
	medium: "h-32 w-32 border-[8px]",
	large: "h-[348px] w-[348px] border-[15px]",
}

const POSITIONS_VALUES = {
	"hero-home": "-right-10 bottom-0 top-0",
	"hero": "-right-8 bottom-0 top-0",
	"footer": "-bottom-44 -right-44",
}

const { numberOvals, size, opacity, position } = Astro.props
const timesOvals = numberOvals === undefined ? 3 : numberOvals

const classPosition = POSITIONS_VALUES[position]
const classSizeOvals = SIZE_VALUES[size]
---

<div class:list={["pointer-events-none absolute z-0 w-auto", classPosition]}>
	<div
		class:list={[
			"flex h-full justify-center gap-x-4",
			opacity && "opacity-10",
			{
				"items-center": position !== "hero-home",
			},
			{ "items-end": position === "hero-home" },
		]}
	>
		{
			Array.from({ length: timesOvals }).map((_, index) => (
				<span
					class:list={[
						"block rounded-full border-white",
						classSizeOvals,
						(index + 1) % 3 === 0 ? "bg-white" : "bg-transparent",
						{ "-translate-y-[24vh]": position === "hero-home" },
					]}
				/>
			))
		}
	</div>
</div>
